-- Enum for the days
CREATE TABLE IF NOT EXISTS DAYS
(
    ID       SERIAL PRIMARY KEY,
    DAY_NAME VARCHAR
);

CREATE TABLE IF NOT EXISTS PARKING_LOT
(
    ID       SERIAL PRIMARY KEY,
    ADDRESS  VARCHAR,
    CAPACITY INT,
    CONSTRAINT ADDRESS_CK UNIQUE (ADDRESS)
);

CREATE TABLE IF NOT EXISTS HOURS
(
    ID         SERIAL PRIMARY KEY,
    OPEN_TIME  TIME,
    CLOSE_TIME TIME,
    DAY        INT REFERENCES DAYS (ID),
    CONSTRAINT HOURS_CK UNIQUE (OPEN_TIME, CLOSE_TIME, DAY)
);

CREATE TABLE IF NOT EXISTS RATES
(
    ID          SERIAL PRIMARY KEY,
    HOURLY_RATE DECIMAL,
    MAX_HOURLY  DECIMAL,
    FLAT_RATE   DECIMAL,
    DAY         INT REFERENCES DAYS (ID),
    CONSTRAINT RATES_CK UNIQUE (HOURLY_RATE, MAX_HOURLY, FLAT_RATE, DAY)
);

CREATE TABLE IF NOT EXISTS PARKING_LOT_RATES
(
    LOT_ID  INT REFERENCES PARKING_LOT (ID),
    RATE_ID INT REFERENCES RATES (ID),
    CONSTRAINT PARKING_LOT_RATES_PK PRIMARY KEY (LOT_ID, RATE_ID)
);

CREATE TABLE IF NOT EXISTS PARKING_LOT_HOURS
(
    LOT_ID   INT REFERENCES PARKING_LOT (ID),
    HOURS_ID INT REFERENCES HOURS (ID),
    CONSTRAINT PARKING_LOT_HOURS_PK PRIMARY KEY (LOT_ID, HOURS_ID)
);

CREATE TABLE IF NOT EXISTS CARS
(
    ID             SERIAL PRIMARY KEY,
    ENTRY_TIME     TIME,
    EXIT_TIME      TIME,
    TICKET_NUMBER  VARCHAR NOT NULL,
    PARKING_LOT_ID INT REFERENCES PARKING_LOTS (ID)
);

CREATE TABLE IF NOT EXISTS USERS
(
    ID         SERIAL PRIMARY KEY,
    FIRST_NAME VARCHAR,
    LAST_NAME  VARCHAR,
    ADDRESS    VARCHAR,
    PHONE      VARCHAR,
    START_DATE DATE,
    ROLE       INT,
    CONSTRAINT USERS_CK UNIQUE (FIRST_NAME, LAST_NAME, PHONE),
    CONSTRAINT USERS_CK2 UNIQUE (FIRST_NAME, LAST_NAME, PHONE, ADDRESS)
);

CREATE TABLE IF NOT EXISTS KEYCARDS
(
    ID               SERIAL PRIMARY KEY,
    ACCESS_TYPE      INT,
    PARKING_LOT_ID   INT REFERENCES PARKING_LOT (ID),
    KEYCARD_OWNER_ID INT REFERENCES USERS (ID),
    CONSTRAINT KEYCARD_CK UNIQUE (PARKING_LOT_ID, KEYCARD_OWNER_ID)
);

CREATE TABLE IF NOT EXISTS PARKING_LOT_KEYCARDS
(
    PARKING_LOT_ID INT REFERENCES PARKING_LOT (ID),
    KEYCARD_ID     INT REFERENCES KEYCARDS (ID),
    CONSTRAINT PARKING_LOT_KEYCARDS_PK PRIMARY KEY (PARKING_LOT_ID, KEYCARD_ID)
);


CREATE TABLE IF NOT EXISTS VALIDATION_TYPES
(
    ID              SERIAL PRIMARY KEY,
    VALIDATION_NAME VARCHAR
);

CREATE TABLE IF NOT EXISTS VALIDATIONS
(
    ID              SERIAL PRIMARY KEY,
    VALIDATION_TYPE INT REFERENCES VALIDATION_TYPES (ID),
    START_DATE      DATE,
    EXPIRY_DATE     DATE,
    DATE_ISSUED     TIME,
    PARKING_LOT_ID  INT REFERENCES PARKING_LOT (ID)
);

CREATE TABLE IF NOT EXISTS REPORT
(
    ID             SERIAL PRIMARY KEY,
    ISSUED_ON      TIMESTAMP,
    START_RANGE    TIMESTAMP,
    END_RANGE      TIMESTAMP,
    PARKING_LOT_ID INT REFERENCES PARKING_LOT (ID)
);


CREATE TABLE IF NOT EXISTS REVENUE_CATEGORIES_LIST
(
    ID                    SERIAL PRIMARY KEY,
    REVENUE_CATEGORY_NAME VARCHAR
);


CREATE TABLE IF NOT EXISTS REVENUE_CATEGORIES
(
    ID               SERIAL PRIMARY KEY,
    REVENUE_CATEGORY INT REFERENCES REVENUE_CATEGORIES_LIST (ID),
    QUANTITY         INT,
    REVENUE          DECIMAL
);


CREATE TABLE IF NOT EXISTS REPORTS_REVENUE_CATEGORIES
(
    REVENUE_CATEGORY INT REFERENCES REVENUE_CATEGORIES (ID),
    REPORT           INT REFERENCES REPORT (ID),
    CONSTRAINT PARKING_LOT_KEYCARDS_PK PRIMARY KEY (REPORT, REVENUE_CATEGORY)
);

CREATE TABLE IF NOT EXISTS PARKING_MOVEMENTS
(
    ID            SERIAL,
    MOVEMENT_TIME TIMESTAMP,
    MOVEMENT_TYPE VARCHAR,
    CAR_ID        INT REFERENCES CARS (ID),
    AMOUNT        REAL
);